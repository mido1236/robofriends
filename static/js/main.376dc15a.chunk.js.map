{"version":3,"sources":["components/ErrorBoundary.js","components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","serviceWorker.js","containers/App.js","index.js"],"names":["ErrorBoundary","props","state","hasError","this","setState","children","Component","Scroll","style","overflowY","height","Card","name","email","id","className","src","CardList","robots","card","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Boolean","window","location","hostname","match","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterd","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8MA4BeA,G,wDAvBd,WAAYC,GACX,IAAD,8BACC,cAAMA,IACDC,MAAQ,CACZC,UAAS,GAHX,E,gEASCC,KAAKC,SAAS,CAACF,UAAS,M,+BAKxB,OAAIC,KAAKF,MAAMC,SAEP,qCAEDC,KAAKH,MAAMK,a,GArBQC,cCObC,EARA,SAACP,GACf,OACC,yBAAKQ,MAAO,CAACC,UAAU,SAASC,OAAO,UACrCV,EAAMK,WCSKM,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,cACR,6BACC,gCAAMF,EAAN,KACA,+BAAKC,MCQMI,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAOD,EAAOE,KAAI,SAACC,EAAKC,GAE7B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIF,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAG/E,OACC,6BACEM,ICEWK,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,6BACC,2BAAOC,KAAK,SACZC,YAAY,cACZC,SAAUH,MCKOI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,SCqCSC,E,kDA1Cd,aAAe,IAAD,8BACb,gBAODC,eAAiB,SAAAC,GAChB,EAAKjC,SAAS,CAAEqB,YAAaY,EAAMC,OAAOC,SAP1C,EAAKtC,MAAQ,CACZiB,OAAQ,GACRO,YAAa,IAJD,E,gEAYO,IAAD,OACnBe,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKxC,SAAS,CAAEc,OAAQ0B,S,+BAIjB,IAAD,OACFC,EAAU1C,KAAKF,MAAMiB,OAAO4B,QAAO,SAAAC,GACxC,OAAOA,EAAMnC,KACXoC,cACAC,SAAS,EAAKhD,MAAMwB,YAAYuB,kBAEnC,OAAuB,IAAnBH,EAAQK,OAAqB,wBAAInC,UAAU,MAAd,WAG/B,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcvB,KAAKiC,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQ2B,W,GAnCPvC,aCLlB6C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.376dc15a.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch()\r\n\t{\r\n\t\tthis.setState({hasError:true});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tif (this.state.hasError)\r\n\t\t{\r\n\t\t\treturn <h1>Sorry</h1>;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className=\"bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5\"> \r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t<p> {email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst card = robots.map((user,i)=>\r\n\t{\r\n\t\treturn\t<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t}\r\n\t);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{card}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input type=\"search\" \r\n\t\t\tplaceholder=\"search here\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../index.css\";\r\nimport \"./App.css\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport * as serviceWorker from \"../serviceWorker\";\r\nimport \"tachyons\";\r\nimport { robots } from \"../robots\";\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\tonSearchChange = event => {\r\n\t\tthis.setState({ searchfield: event.target.value });\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => {\r\n\t\t\t\tthis.setState({ robots: users });\r\n\t\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filterd = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name\r\n\t\t\t\t.toLowerCase()\r\n\t\t\t\t.includes(this.state.searchfield.toLowerCase());\r\n\t\t});\r\n\t\tif (filterd.length === 0) return <h1 className=\"f2\">LOADING</h1>;\r\n\t\telse\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1 className=\"f2\">ROBOFRIENDS</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filterd} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}